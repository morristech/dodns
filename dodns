#!/usr/bin/env bash

# Dynamic DNS with Digital Ocean

wan_ip() {
    dig +short myip.opendns.com @resolver1.opendns.com
}

# all A records for a domain
get_records() {
    [ "$DIGITAL_OCEAN_API" ] || return
    [ "$DOMAIN" ] || return
    curl -s --connect-timeout 5 -X GET \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $DIGITAL_OCEAN_API" \
    "https://api.digitalocean.com/v2/domains/$DOMAIN/records" \
    | grep -o '{"id[^}]*}' | grep '"type":"A",'
}

# for the People
pretty_records() {
    get_records | sed 's/^.*"id":\([^,]*\).*"name":"\([^"]*\)".*"data":"\([^"]*\)".*$/\1 \2 \3/' | column -t
}

# A record(s) for subdomain (ID and value)
get_record() {
    [ "$DIGITAL_OCEAN_API" ] || return
    [ "$DOMAIN" ] || return
    [ "$SUB" ] || return
    get_records | grep '"name":"'$SUB'"' \
    | sed 's/^.*"id":\([^,]*\).*"data":"\([^"]*\)".*$/\1 \2/'
}

# create A record for subdomain
create_record() {
    #{domain_record:{id,type,name,data,priority,port,weight}}
    [ "$DIGITAL_OCEAN_API" ] || return
    [ "$DOMAIN" ] || return
    [ "$SUB" ] || return
    IP=${IP:-$(wan_ip)}
    [ "$IP" ] || return
    curl -s --connect-timeout 5 -X POST \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $DIGITAL_OCEAN_API" \
    -d '{"type":"A","name":"'$SUB'","data":"'$IP'"}' \
    "https://api.digitalocean.com/v2/domains/$DOMAIN/records" \
    | sed 's/^.*"id":\([^,]*\).*$/\1/'
}

# by ID
update_record() {
    #{domain_record:{id,type,name,data,priority,port,weight}}
    [ "$DIGITAL_OCEAN_API" ] || return
    [ "$DOMAIN" ] || return
    [ "$ID" ] || return
    IP=${IP:-$(wan_ip)}
    [ "$IP" ] || return
    curl -s --connect-timeout 5 -X PUT \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $DIGITAL_OCEAN_API" \
    -d '{"data":"'$IP'"}' \
    "https://api.digitalocean.com/v2/domains/$DOMAIN/records/$ID"
}

# by ID
delete_record() {
    [ "$DIGITAL_OCEAN_API" ] || return
    [ "$DOMAIN" ] || return
    [ "$ID" ] || return
    # success is a 204 with no body
    curl -s --connect-timeout 5 -X DELETE \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $DIGITAL_OCEAN_API" \
    "https://api.digitalocean.com/v2/domains/$DOMAIN/records/$ID"
}

# put in ~/Library/LaunchAgents
echo_plist() {
    [ "$DIGITAL_OCEAN_API" ] || return
    [ "$DOMAIN" ] || return
    [ "$SUB" ] || return
cat <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN"
          "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>horse.dev.location_change</string>
    <key>EnvironmentVariables</key>
    <dict>
        <key>DIGITAL_OCEAN_API</key>
        <string>$DIGITAL_OCEAN_API</string>
    </dict>
    <key>ProgramArguments</key>
    <array>
        <string>$PWD/odns</string>
        <string>$DOMAIN</string>
        <string>$SUB</string>
        <string>ddns</string>
    </array>
    <key>WatchPaths</key>
    <array>
        <string>/Library/Preferences/SystemConfiguration</string>
    </array>
</dict>
</plist>
EOF
}

# put in /etc/NetworkManager/dispatcher.d
echo_nm_script() {
    [ "$DIGITAL_OCEAN_API" ] || return
    [ "$DOMAIN" ] || return
    [ "$SUB" ] || return
    echo "#!/bin/bash"
    echo
    echo "DIGITAL_OCEAN_API=$DIGITAL_OCEAN_API"
    echo "[ \"\$2\" = \"up\" ] && $PWD/dodns $DOMAIN $SUB ddns"
}

# curl command suitable for copy/pasting
echo_update_command() {
    [ "$DIGITAL_OCEAN_API" ] || return
    [ "$DOMAIN" ] || return
    [ "$ID" ] || return
    echo curl -s --connect-timeout 5 -X PUT \
    -H "'Content-Type: application/json'" \
    -H "'Authorization: Bearer $DIGITAL_OCEAN_API'" \
    -d "'{\"data\":\"'\$(dig +short myip.opendns.com @resolver1.opendns.com)'\"}'" \
    "https://api.digitalocean.com/v2/domains/$DOMAIN/records/$ID"
}

# only update if necessary
dynamic_dns() {
    [ "$DIGITAL_OCEAN_API" ] || return
    [ "$DOMAIN" ] || return
    [ "$SUB" ] || return
    record=$(get_record)
    OLD_IP=${record#* }
    ID=${record% *}
    if [ "$ID" ]; then
        IP=${IP:-$(wan_ip)}
        [ "$OLD_IP" = "$IP" ] || update_record
    else
        create_record
    fi
}

if [ "$3" = "ddns" ]; then
    DOMAIN=$1 SUB=$2 dynamic_dns
elif [ "$3" = "create" ]; then
    DOMAIN=$1 SUB=$2 create_record
elif [ "$3" = "update" ]; then
    DOMAIN=$1 ID=$2 update_record
elif [ "$3" = "delete" ]; then
    DOMAIN=$1 ID=$2 delete_record
elif [ "$3" = "plist" ]; then
    DOMAIN=$1 SUB=$2 echo_plist
elif [ "$3" = "nm" ]; then
    DOMAIN=$1 SUB=$2 echo_nm_script
elif [ "$3" = "curl" ]; then
    DOMAIN=$1 ID=$2 echo_update_command
elif [ "$2" ]; then
    DOMAIN=$1 SUB=$2 get_record
elif [ "$1" ]; then
    DOMAIN=$1 pretty_records
else
   echo -n "$(basename $0)"
   echo " DOMAIN [SUB [ddns|create|plist|nm] | ID update | ID delete | ID curl]"
fi
